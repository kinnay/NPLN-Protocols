
syntax = "proto3";

package nn.npln.toyohr.v1;

import "proto/common/value.proto";
import "proto/toyohr/v1/resources.proto";

message CreateBankaraChallengeRequest {
	string parent = 1;
	BankaraChallenge bankara_challenge = 2;
}

message InitializeAttributesRequest {
	message InitialVs {
		int32 season_id = 1;
		double initial_rate = 2;
		bool transferred = 3;
	}
	
	message Area {}
	message Lift {}
	message Goal {}
	message Clam {}
	
	message XPowerArea {}
	message XPowerLift {}
	message XPowerGoal {}
	message XPowerClam {}
	
	message InitialCoop {}
	
	message CoopShift {
		string shift_id = 1;
		string job_type = 2;
	}
	
	message CoopGrade {
		int32 total_grade_point = 1;
	}
	
	message NewSeason {
		int32 season_id = 1;
	}
	
	string user = 1;
	string initialize_type = 2;
	int32 unk1 = 3;
	int32 unk2 = 4;
	string season = 5;
	InitialVs initial_vs = 6;
	Area area = 7;
	Lift lift = 8;
	Goal goal = 9;
	Clam clam = 10;
	XPowerArea x_power_area = 11;
	XPowerLift x_power_lift = 12;
	XPowerGoal x_power_goal = 13;
	XPowerClam x_power_clam = 14;
	InitialCoop initial_coop = 15;
	CoopShift coop_shift = 16;
	CoopGrade coop_grade = 17;
	NewSeason new_season = 18;
}

message InitializeAttributesResponse {
	nn.npln.common.MapValue attributes = 1;
	string document = 2;
}

message CreateFestPowerMeasurementRequest {
	string parent = 1;
	FestPowerMeasurement fest_power_measurement = 2;
}

message InitializeTagRequest {
	string tenant = 1;
	repeated string users = 2;
	string league_schedule = 3;
	int32 game_rule = 4;
}

message InitializeTagResponse {
	// [UNKNOWN]
}

message GetTagRequest {
	string name = 1;
}

message GetTagResponse {
	// [UNKNOWN]
}

message SelectTagsRequest {
	string tenant = 1;
	string user = 2;
	int32 page_size = 3;
	string page_token = 4;
}

message SelectTagsResponse {
	// [UNKNOWN]
}

service GameRecord {
	rpc CreateBankaraChallenge(CreateBankaraChallengeRequest) returns (BankaraChallenge);
	rpc InitializeAttributes(InitializeAttributesRequest) returns (InitializeAttributesResponse);
	rpc CreateFestPowerMeasurement(CreateFestPowerMeasurementRequest) returns (FestPowerMeasurement);
	rpc InitializeTag(InitializeTagRequest) returns (InitializeTagResponse);
	rpc GetTag(GetTagRequest) returns (GetTagResponse);
	rpc SelectTags(SelectTagsRequest) returns (SelectTagsResponse);
}
